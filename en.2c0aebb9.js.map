{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAK,CAAC,usM","sources":["<anon>","src/locales/en.json"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire31d6\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lhNRY\", function(module, exports) {\nmodule.exports = JSON.parse('{\"messages\":{\"finishedExecution\":\"Finished execution.\",\"fastForwardEnabled\":\"Step by step execution will be fast forwarded.\",\"fastForwardDisabled\":\"Step by step execution is enabled.\",\"possiblyCorrect\":\"\\\\\"{{word}}\\\\\" is possibly correct.\",\"definitelyIncorrect\":\"\\\\\"{{word}}\\\\\" is definitely incorrect.\",\"checkingIf\":\"Checking if \\'{{item}}\\' is in the Bloom Filter...\",\"alreadyInserted\":\"\\'{{item}}\\' was already inserted. Adding it again will not change the filter.\",\"hashesCalculated\":\"{{count}}/{{total}} hashes calculated.\",\"hashFor\":\"The hash_{{index}} for \\'{{item}}\\' is {{value}}\",\"setBit\":\"Set the bit at position {{position}} in the bit array\",\"checkBit\":\"Check the bit at position {{position}} in the bit array\",\"itemAdded\":\"\\'{{item}}\\' has been added to the Bloom Filter.\",\"positionsVerified\":\"{{count}}/{{total}} positions verified.\",\"bitIsOne\":\"The bit at position {{position}} is 1\",\"bitIsZero\":\"The bit at position {{position}} is 0\",\"itemMightBe\":\"This means the item might be in the Bloom Filter...\",\"itemDefinitelyNot\":\"This means that \\'{{item}}\\' is definitely NOT in the Bloom Filter.\",\"allBitsAreOne\":\"All the bits at the calculated positions are 1.\",\"wasAddedEarlier\":\"In fact, it was added earlier!\",\"falsePositive\":\"However, it was never added. This is a false positive!\"},\"ui\":{\"simulator\":\"Simulator\",\"theory\":\"Theory\",\"spellChecker\":\"Spell Checker\",\"about\":\"About\",\"loadDictionary\":\"Load Dictionary\",\"set\":\"Set\",\"add\":\"Add\",\"check\":\"Check\",\"finish\":\"Finish\",\"numberOfBitsLabel\":\"Number of bits (m):\",\"bitSizeInfo\":\"Max 500 bits\",\"dummyWordsInfo\":\"We might not show every item you add\",\"numberOfHashFunctionsLabel\":\"Number of hash functions (k):\",\"hashCountInfo\":\"At least 1, max 10\",\"numberOfElementsLabel\":\"Number of elements (n):\",\"enterItemToAddPlaceholder\":\"Enter item to add\",\"enterItemToCheckPlaceholder\":\"Enter item to check\",\"enableStepByStep\":\"Enable step-by-step execution:\",\"back\":\"Back\",\"next\":\"Next\",\"aboutProjectTitle\":\"About this project\",\"aboutProjectDesc\":\"This is a Bloom Filter algorithm visualizer built using JavaScript, HTML, and CSS. It is designed to help users understand how the Bloom Filter data structure works through interactive simulations and visual representations.\",\"sourceDictionaryFile\":\"Source dictionary file\",\"jabberwocky\":\"This spell checker uses a Bloom Filter to determine if a word is likely in the \\\\\"Jabberwocky\\\\\" poem by Lewis Carroll. To initialize the bloom filter, we set the n param to be the number of unique words in the poem (n=90) and p to be 0.000001. The k and m values were calculated using the formulas below: \",\"jabberwockyDesc\":\"This spell checker uses a Bloom Filter to determine if a word is likely in the \\\\\"Jabberwocky\\\\\" poem by Lewis Carroll (I tried using an english dictionary, but it went really wrong). To initialize the bloom filter, we set the n param to be the number of unique words in the poem (n=90) and p to be 0.000001. The k and m values were calculated using the formulas below:\",\"jabberwockyAfterInit\":\"After the bloom filter got initialized and all the 90 words were inserted, the false positive rate could be recalculated.\",\"codeCommentElements\":\"// n = ceil(2588 / (-20 / log(1 - exp(log(0.000001) / 20)))) <-- 91 elements\",\"codeCommentN\":\"// this means we can keep the p value for one more element (: \",\"jabberwockyPoemHeader\":\"You can read the full poem below:\",\"jabberwockyCheckIntro\":\"In some cases, you might want to see how many elements a filter can have, given k, m and p. If this is the case, you can use the following formula:\",\"jabberwockyTitle\":\"Jabberwocky by Lewis Carroll\",\"jabberwockyHref\":\"https://en.wikipedia.org/wiki/Jabberwocky\",\"developer\":\"This project was developed by \",\"mightCrashMobile\":\"\\uD83D\\uDCF5\\u203C\\uFE0FLoading the dictionary might crash your browser on mobile devices.\",\"filterSize\":\"Filter size (m):\",\"hashFunctions\":\"Hash functions (k):\",\"elements\":\"Elements (n):\",\"falsePositiveRate\":\"False positive rate (p):\",\"dictionaryLoaded\":\"Dictionary Loaded\",\"loading\":\"Loading...\",\"greetAddItem\":\"Add an item or check if an item is in the Bloom Filter using the buttons above.\",\"errorBitSize\":\"Error: Bit size cannot exceed 500.\",\"greetNavigation\":\"You can use the \\'Next\\' and \\'Back\\' buttons to step through the process.\",\"greetFastForward\":\"Disable the \\'Enable Step-by-Step execution\\' checkbox or the \\'Finish\\' button to skip to the end of a process.\",\"greetEnjoy\":\"Enjoy!\"},\"jabberwocky\":{\"text\":\"Twas brillig and the slithy toves Did gyre and gimble in the wabe All mimsy were the borogoves And the mome raths outgrabe Beware the Jabberwock my son The jaws that bite the claws that catch Beware the Jubjub bird and shun The frumious Bandersnatch He took his vorpal sword in hand Long time the manxome foe he sought So rested he by the Tumtum tree And stood awhile in thought And as in uffish thought he stood The Jabberwock with eyes of flame Came whiffling through the tulgey wood And burbled as it came One two One two And through and through The vorpal blade went snicker-snack He left it dead and with its head He went galumphing back And hast thou slain the Jabberwock Come to my arms my beamish boy O frabjous day Callooh Callay He chortled in his joy Twas brillig and the slithy toves Did gyre and gimble in the wabe All mimsy were the borogoves And the mome raths outgrabe\",\"poem\":\"\\u2018Twas brillig, and the slithy toves\\\\nDid gyre and gimble in the wabe:\\\\nAll mimsy were the borogoves,\\\\nAnd the mome raths outgrabe.\\\\n\\\\n\\u201CBeware the Jabberwock, my son!\\\\nThe jaws that bite, the claws that catch!\\\\nBeware the Jubjub bird, and shun\\\\nThe frumious Bandersnatch!\\u201D\\\\n\\\\nHe took his vorpal sword in hand:\\\\nLong time the manxome foe he sought\\u2014\\\\nSo rested he by the Tumtum tree,\\\\nAnd stood awhile in thought.\\\\n\\\\nAnd, as in uffish thought he stood,\\\\nThe Jabberwock, with eyes of flame,\\\\nCame whiffling through the tulgey wood,\\\\nAnd burbled as it came!\\\\n\\\\nOne, two! One, two! And through and through\\\\nThe vorpal blade went snicker-snack!\\\\nHe left it dead, and with its head\\\\nHe went galumphing back.\\\\n\\\\n\\u201CAnd hast thou slain the Jabberwock?\\\\nCome to my arms, my beamish boy!\\\\nO frabjous day! Callooh! Callay!\\u201D\\\\nHe chortled in his joy.\\\\n\\\\n\\u2018Twas brillig, and the slithy toves\\\\nDid gyre and gimble in the wabe:\\\\nAll mimsy were the borogoves,\\\\nAnd the mome raths outgrabe.\"}}');\n\n});\n\n\n//# sourceMappingURL=en.2c0aebb9.js.map\n","{\n\t\"messages\": {\n\t\t\"finishedExecution\": \"Finished execution.\",\n\t\t\"fastForwardEnabled\": \"Step by step execution will be fast forwarded.\",\n\t\t\"fastForwardDisabled\": \"Step by step execution is enabled.\",\n\t\t\"possiblyCorrect\": \"\\\"{{word}}\\\" is possibly correct.\",\n\t\t\"definitelyIncorrect\": \"\\\"{{word}}\\\" is definitely incorrect.\",\n\t\t\"checkingIf\": \"Checking if '{{item}}' is in the Bloom Filter...\",\n\t\t\"alreadyInserted\": \"'{{item}}' was already inserted. Adding it again will not change the filter.\",\n\t\t\"hashesCalculated\": \"{{count}}/{{total}} hashes calculated.\",\n\t\t\"hashFor\": \"The hash_{{index}} for '{{item}}' is {{value}}\",\n\t\t\"setBit\": \"Set the bit at position {{position}} in the bit array\",\n\t\t\"checkBit\": \"Check the bit at position {{position}} in the bit array\",\n\t\t\"itemAdded\": \"'{{item}}' has been added to the Bloom Filter.\",\n\t\t\"positionsVerified\": \"{{count}}/{{total}} positions verified.\",\n\t\t\"bitIsOne\": \"The bit at position {{position}} is 1\",\n\t\t\"bitIsZero\": \"The bit at position {{position}} is 0\",\n\t\t\"itemMightBe\": \"This means the item might be in the Bloom Filter...\",\n\t\t\"itemDefinitelyNot\": \"This means that '{{item}}' is definitely NOT in the Bloom Filter.\",\n\t\t\"allBitsAreOne\": \"All the bits at the calculated positions are 1.\",\n\t\t\"wasAddedEarlier\": \"In fact, it was added earlier!\",\n\t\t\"falsePositive\": \"However, it was never added. This is a false positive!\"\n\t},\n\t\"ui\": {\n\t\t\"simulator\": \"Simulator\",\n\t\t\"theory\": \"Theory\",\n\t\t\"spellChecker\": \"Spell Checker\",\n\t\t\"about\": \"About\",\n\t\t\"loadDictionary\": \"Load Dictionary\",\n\t\t\"set\": \"Set\",\n\t\t\"add\": \"Add\",\n\t\t\"check\": \"Check\",\n\t\t\"finish\": \"Finish\",\n\t\t\"numberOfBitsLabel\": \"Number of bits (m):\",\n\t\t\"bitSizeInfo\": \"Max 500 bits\",\n\t\t\"dummyWordsInfo\": \"We might not show every item you add\",\n\t\t\"numberOfHashFunctionsLabel\": \"Number of hash functions (k):\",\n\t\t\"hashCountInfo\": \"At least 1, max 10\",\n\t\t\"numberOfElementsLabel\": \"Number of elements (n):\",\n\t\t\"enterItemToAddPlaceholder\": \"Enter item to add\",\n\t\t\"enterItemToCheckPlaceholder\": \"Enter item to check\",\n\t\t\"enableStepByStep\": \"Enable step-by-step execution:\",\n\t\t\"back\": \"Back\",\n\t\t\"next\": \"Next\",\n\t\t\"aboutProjectTitle\": \"About this project\",\n\t\t\"aboutProjectDesc\": \"This is a Bloom Filter algorithm visualizer built using JavaScript, HTML, and CSS. It is designed to help users understand how the Bloom Filter data structure works through interactive simulations and visual representations.\",\n\t\t\"sourceDictionaryFile\": \"Source dictionary file\",\n\t\t\"jabberwocky\": \"This spell checker uses a Bloom Filter to determine if a word is likely in the \\\"Jabberwocky\\\" poem by Lewis Carroll. To initialize the bloom filter, we set the n param to be the number of unique words in the poem (n=90) and p to be 0.000001. The k and m values were calculated using the formulas below: \",\n\t\t\"jabberwockyDesc\": \"This spell checker uses a Bloom Filter to determine if a word is likely in the \\\"Jabberwocky\\\" poem by Lewis Carroll (I tried using an english dictionary, but it went really wrong). To initialize the bloom filter, we set the n param to be the number of unique words in the poem (n=90) and p to be 0.000001. The k and m values were calculated using the formulas below:\",\n\t\t\"jabberwockyAfterInit\": \"After the bloom filter got initialized and all the 90 words were inserted, the false positive rate could be recalculated.\",\n\t\t\"codeCommentElements\": \"// n = ceil(2588 / (-20 / log(1 - exp(log(0.000001) / 20)))) <-- 91 elements\",\n\t\t\"codeCommentN\": \"// this means we can keep the p value for one more element (: \",\n\t\t\"jabberwockyPoemHeader\": \"You can read the full poem below:\",\n\t\t\"jabberwockyCheckIntro\": \"In some cases, you might want to see how many elements a filter can have, given k, m and p. If this is the case, you can use the following formula:\",\n\t\t\"jabberwockyTitle\": \"Jabberwocky by Lewis Carroll\",\n\t\t\"jabberwockyHref\": \"https://en.wikipedia.org/wiki/Jabberwocky\",\n\t\t\"developer\": \"This project was developed by \",\n\t\t\"mightCrashMobile\": \"📵‼️Loading the dictionary might crash your browser on mobile devices.\",\n\t\t\"filterSize\": \"Filter size (m):\",\n\t\t\"hashFunctions\": \"Hash functions (k):\",\n\t\t\"elements\": \"Elements (n):\",\n\t\t\"falsePositiveRate\": \"False positive rate (p):\",\n\t\t\"dictionaryLoaded\": \"Dictionary Loaded\",\n\t\t\"loading\": \"Loading...\",\n\t\t\"greetAddItem\": \"Add an item or check if an item is in the Bloom Filter using the buttons above.\",\n\t\t\"errorBitSize\": \"Error: Bit size cannot exceed 500.\",\n\t\t\"greetNavigation\": \"You can use the 'Next' and 'Back' buttons to step through the process.\",\n\t\t\"greetFastForward\": \"Disable the 'Enable Step-by-Step execution' checkbox or the 'Finish' button to skip to the end of a process.\",\n\t\t\"greetEnjoy\": \"Enjoy!\"\n\t},\n\t\"jabberwocky\": {\n\t\t\"text\": \"Twas brillig and the slithy toves Did gyre and gimble in the wabe All mimsy were the borogoves And the mome raths outgrabe Beware the Jabberwock my son The jaws that bite the claws that catch Beware the Jubjub bird and shun The frumious Bandersnatch He took his vorpal sword in hand Long time the manxome foe he sought So rested he by the Tumtum tree And stood awhile in thought And as in uffish thought he stood The Jabberwock with eyes of flame Came whiffling through the tulgey wood And burbled as it came One two One two And through and through The vorpal blade went snicker-snack He left it dead and with its head He went galumphing back And hast thou slain the Jabberwock Come to my arms my beamish boy O frabjous day Callooh Callay He chortled in his joy Twas brillig and the slithy toves Did gyre and gimble in the wabe All mimsy were the borogoves And the mome raths outgrabe\",\n\t\t\"poem\": \"‘Twas brillig, and the slithy toves\\nDid gyre and gimble in the wabe:\\nAll mimsy were the borogoves,\\nAnd the mome raths outgrabe.\\n\\n“Beware the Jabberwock, my son!\\nThe jaws that bite, the claws that catch!\\nBeware the Jubjub bird, and shun\\nThe frumious Bandersnatch!”\\n\\nHe took his vorpal sword in hand:\\nLong time the manxome foe he sought—\\nSo rested he by the Tumtum tree,\\nAnd stood awhile in thought.\\n\\nAnd, as in uffish thought he stood,\\nThe Jabberwock, with eyes of flame,\\nCame whiffling through the tulgey wood,\\nAnd burbled as it came!\\n\\nOne, two! One, two! And through and through\\nThe vorpal blade went snicker-snack!\\nHe left it dead, and with its head\\nHe went galumphing back.\\n\\n“And hast thou slain the Jabberwock?\\nCome to my arms, my beamish boy!\\nO frabjous day! Callooh! Callay!”\\nHe chortled in his joy.\\n\\n‘Twas brillig, and the slithy toves\\nDid gyre and gimble in the wabe:\\nAll mimsy were the borogoves,\\nAnd the mome raths outgrabe.\"\n\t}\n}"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","JSON","parse"],"version":3,"file":"en.2c0aebb9.js.map"}